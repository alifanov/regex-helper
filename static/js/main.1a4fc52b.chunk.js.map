{"version":3,"sources":["RegexGenerator.js","App.js","serviceWorker.js","index.js"],"names":["deduplicateTokens","tokens","Set","exportTokens","pattern","text","match","exec","push","App","props","tokenPattern","initialText","_getTokens","state","_getPattern","patternCopied","contentEditable","React","createRef","_handleChange","bind","result","this","token","replace","naivePattern","RegExp","length","join","textWithoutMarkup","patternCandidate","extractedTokens","_","isEqual","generateRegexPattern","map","tp","e","target","value","setState","className","onChange","dangerouslySetInnerHTML","__html","_getHighlightedTokensText","toString","onCopy","setTimeout","style","color","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a4fc52b.chunk.js","sourcesContent":["import _ from 'lodash';\n\nexport const deduplicateTokens = tokens => [...new Set(tokens)];\n\nexport const exportTokens = (pattern, text) => {\n  const tokens = [];\n  let match = pattern.exec(text);\n\n  while (match !== null) {\n    tokens.push(match[1]);\n    match = pattern.exec(text);\n  }\n\n  return tokens;\n};\n\nconst guessNumberAlphaPattern = (tokens, text) => {\n  const numberOfDigitsInTokens = tokens.map(t => (t.match(/\\d/g) || []).length);\n  const minNumberInTokens = _.min(numberOfDigitsInTokens);\n  const maxNumberInTokens = _.max(numberOfDigitsInTokens);\n\n  const numberOfAlphaInTokens = tokens.map(t => (t.match(/[a-zA-Z]/g) || []).length);\n  const minAlphaInTokens = _.min(numberOfAlphaInTokens);\n  const maxAlphaInTokens = _.max(numberOfAlphaInTokens);\n\n  const numberPatternPart = `\\d{${minNumberInTokens},${maxNumberInTokens}`;\n  const alphaNumberPart = `[a-zA-Z]{${minAlphaInTokens},${maxAlphaInTokens}`;\n\n  for (const patternString of [\n    `${numberPatternPart}${alphaNumberPart}`,\n    `${alphaNumberPart}${numberPatternPart}`,\n    `${numberPatternPart}${alphaNumberPart}${numberPatternPart}${alphaNumberPart}`,\n    `${alphaNumberPart}${numberPatternPart}${alphaNumberPart}${numberPatternPart}`,\n    `${numberPatternPart}${alphaNumberPart}${numberPatternPart}${alphaNumberPart}${numberPatternPart}${alphaNumberPart}`,\n    `${alphaNumberPart}${numberPatternPart}${alphaNumberPart}${numberPatternPart}${alphaNumberPart}${numberPatternPart}`,\n  ]) {\n    const extractedTokens = deduplicateTokens(exportTokens(new RegExp(patternString), text));\n    if (_.isEqual(tokens, extractedTokens)) {\n      return new RegExp(patternString);\n    }\n\n  }\n};\n\nexport default function generateRegexPattern(tokens, text) {\n  const naivePattern = new RegExp(tokens.length > 1 ? `(${tokens.join('|')})` : tokens, 'g');\n\n  const textWithoutMarkup = text.replace('{', '').replace('}', '');\n\n  const wordPattern = /([a-zA-Z]+)/mg;\n  const numberPattern = /(\\d+)/mg;\n  const datePattern = /(\\d{1,2}[.-]\\d{1,2}[.-]\\d{2,4})/mg;\n  const hashPattern = /(\\d+[a-zA-Z]+\\w*|[a-zA-Z]+\\d+\\w*)/mg;\n  const ipPattern = /((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})/mg;\n  const ipv6Pattern = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/mg;\n  const emailPattern = /([^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+)/mg;\n  const macAddressPattern = /[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}/mg;\n  const urlPattern = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/mg;\n  const phoneNumberPattern = /[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}/mg;\n  const uuidPattern = /[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}/mg;\n\n  const patternCandidates = [\n    ipPattern,\n    ipv6Pattern,\n    phoneNumberPattern,\n    numberPattern,\n    emailPattern,\n    datePattern,\n    wordPattern,\n    macAddressPattern,\n    urlPattern,\n    uuidPattern,\n    hashPattern,\n  ];\n\n  for (const patternCandidate of patternCandidates) {\n    const extractedTokens = deduplicateTokens(exportTokens(patternCandidate, textWithoutMarkup));\n    if (_.isEqual(tokens, extractedTokens)) {\n      return patternCandidate;\n    }\n  }\n\n  return naivePattern;\n};","import React from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\n\nimport './App.css';\n\n\nimport generateRegexPattern, {exportTokens, deduplicateTokens} from \"./RegexGenerator\";\n\nconst Checkbox = ({key, label, handleChange}) => {\n  return (<label>\n    <input type=\"checkbox\" onChange={handleChange}/>\n    {label}\n  </label>)\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tokenPattern = /{([^}]*)}/g;\n\n    const initialText = 'my postcode is {BC123DO}';\n    const tokens = this._getTokens(initialText);\n\n    this.state = {\n      initialText,\n      text: initialText,\n      pattern: this._getPattern(tokens, initialText),\n      patternCopied: false,\n      tokens: tokens,\n    };\n    this.contentEditable = React.createRef();\n    this._handleChange = this._handleChange.bind(this);\n\n  }\n\n  _getHighlightedTokensText() {\n    let result = this.state.text;\n    for (const token of this.state.tokens) {\n      result = result.replace(token, `<span class=\"matched\">${token}</span>`)\n    }\n    return result;\n  }\n\n  _getTokens(text) {\n    return deduplicateTokens(exportTokens(this.tokenPattern, text));\n  }\n\n  _getPattern(tokens, text) {\n    return generateRegexPattern(tokens.map(tp => tp.replace('<', '').replace('>', '')), text);\n  }\n\n  _handleChange(e) {\n    const text = e.target.value;\n    this.setState({text});\n    let tokens = this._getTokens(text);\n    // const lines = text.split(/\\r?\\n/).filter(v => !!v);\n    if (tokens.length > 0) {\n      this.setState({tokens});\n      const pattern = this._getPattern(tokens, text);\n      if (pattern) {\n        this.setState({pattern});\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <textarea className='textArea' onChange={this._handleChange}>{this.state.initialText}</textarea>\n        <div className='output' dangerouslySetInnerHTML={{__html: this._getHighlightedTokensText()}}/>\n        {this.state.pattern && (<div>\n          <p>Seems your pattern is: <b>{this.state.pattern.toString()}</b> <CopyToClipboard text={this.state.pattern}\n                                                                                            onCopy={() => {\n                                                                                              this.setState({patternCopied: true});\n                                                                                              setTimeout(() => this.setState({patternCopied: false}), 1000)\n                                                                                            }}>\n            <button>Copy to clipboard</button>\n          </CopyToClipboard>         {this.state.patternCopied ? <span style={{color: 'red'}}>Copied</span> : null}\n          </p>\n          {/*{this.state.tokens.map((t, i) => <div>{t}: {[\"number\", \"text\", \"date\"].map(_type => <Checkbox key={i}*/}\n          {/*                                                                                              label={_type}/>)}</div>)}*/}\n        </div>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}