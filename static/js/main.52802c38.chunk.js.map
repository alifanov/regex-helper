{"version":3,"sources":["RegexGenerator.js","App.js","serviceWorker.js","index.js"],"names":["deduplicateTokens","tokens","Set","exportTokens","pattern","text","match","exec","push","wordPattern","numberPattern","datePattern","hashPattern","ipPattern","ipv6Pattern","emailPattern","macAddressPattern","urlPattern","phoneNumberPattern","uuidPattern","patternExtractor","patternString","extractedTokens","RegExp","_","isEqual","guessNumberAlphaPattern","allTextParts","uniq","filter","p","part","includes","partInTokens","numberOfDigitsInTokens","map","t","length","minNumberInTokens","min","maxNumberInTokens","max","numberOfAlphaInTokens","minAlphaInTokens","maxAlphaInTokens","numberPatternPart","alphaNumberPart","candidates","combinations","negPartPattern","join","negPattern","App","props","tokenPattern","initialText","_getTokens","state","_getPattern","patternCopied","inProgress","contentEditable","React","createRef","_handleChange","bind","_guessPattern","result","this","replace","token","naivePattern","textWithoutMarkup","patternCandidateExtractor","generateRegexPattern","tp","e","target","value","setState","setTimeout","s","className","href","defaultValue","rows","onChange","key","disabled","onClick","dangerouslySetInnerHTML","__html","_getHighlightedTokensText","toString","onCopy","icon","faCopy","style","color","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52802c38.chunk.js","sourcesContent":["import _ from 'lodash';\n\nimport combinations from 'combinations';\n\nexport const deduplicateTokens = tokens => [...new Set(tokens)];\n\nexport const exportTokens = (pattern, text) => {\n  const tokens = [];\n  let match = pattern.exec(text);\n\n  while (match && match[1]) {\n    tokens.push(match[1]);\n    match = pattern.exec(text);\n  }\n\n  return tokens;\n};\n\nconst wordPattern = /([a-zA-Z]+)/mg;\nconst numberPattern = /(\\d+)/mg;\nconst datePattern = /(\\d{1,2}[.-]\\d{1,2}[.-]\\d{2,4})/mg;\nconst hashPattern = /(\\d+[a-zA-Z]+\\w*|[a-zA-Z]+\\d+\\w*)/mg;\nconst ipPattern = /((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})/mg;\nconst ipv6Pattern = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/mg;\nconst emailPattern = /([^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+)/mg;\nconst macAddressPattern = /[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}/mg;\nconst urlPattern = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/mg;\nconst phoneNumberPattern = /[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}/mg;\nconst uuidPattern = /[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}/mg;\n\nconst patternExtractor = patternString => (tokens, text) => {\n  const extractedTokens = deduplicateTokens(exportTokens(new RegExp(patternString), text));\n  if (_.isEqual(tokens, extractedTokens)) {\n    return new RegExp(patternString);\n  }\n};\n\nconst partInTokens = (part, tokens) => {\n  for (const token of tokens) {\n    if (token.includes(part)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const guessNumberAlphaPattern = (tokens, text) => {\n  let allTextParts = _.uniq(exportTokens(/([a-zA-Z]+)/g, text));\n  allTextParts = allTextParts.filter(p => !partInTokens(p, tokens));\n\n  const numberOfDigitsInTokens = tokens.map(t => (exportTokens(/(\\d+)/g, t)[0] || '').length);\n  const minNumberInTokens = _.min(numberOfDigitsInTokens);\n  const maxNumberInTokens = _.max(numberOfDigitsInTokens);\n\n  const numberOfAlphaInTokens = tokens.map(t => (exportTokens(/([a-zA-Z]+)/g, t)[0] || []).length);\n  const minAlphaInTokens = _.min(numberOfAlphaInTokens);\n  const maxAlphaInTokens = _.max(numberOfAlphaInTokens);\n\n  const numberPatternPart = minNumberInTokens !== maxNumberInTokens ? `\\\\d{${minNumberInTokens},${maxNumberInTokens}}` : `\\\\d{${minNumberInTokens}}`;\n  const alphaNumberPart = minAlphaInTokens !== maxAlphaInTokens ? `[a-zA-Z]{${minAlphaInTokens},${maxAlphaInTokens}}` : `[a-zA-Z]{${minAlphaInTokens}}`;\n\n  const candidates = [\n    `${numberPatternPart}${alphaNumberPart}`,\n    `${alphaNumberPart}${numberPatternPart}`,\n\n    `${numberPatternPart}${alphaNumberPart}${numberPatternPart}`,\n    `${alphaNumberPart}${numberPatternPart}${alphaNumberPart}`,\n  ];\n\n  for (const patternString of candidates) {\n    const extractedTokens = deduplicateTokens(exportTokens(new RegExp(`(${patternString})`, 'g'), text));\n    if (_.isEqual(tokens, extractedTokens)) {\n      return new RegExp(`(${patternString})`, 'g');\n    }\n  }\n\n  for (const patternString of candidates) {\n    for (const negPart of combinations(allTextParts)) {\n      const negPartPattern = negPart.map(p => `(?!${p})`).join('');\n      const negPattern = `(${negPartPattern}${patternString})`;\n      const extractedTokens = deduplicateTokens(exportTokens(new RegExp(negPattern, 'g'), text));\n      if (_.isEqual(tokens, extractedTokens)) {\n        return new RegExp(negPattern, 'g');\n      }\n    }\n  }\n\n  for (const negPart of combinations(allTextParts)) {\n    const negPartPattern = negPart.map(p => `(?!${p})`).join('');\n    for (const patternString of [\n      `(${numberPatternPart}${negPartPattern}${alphaNumberPart})`,\n      `(${alphaNumberPart}${negPartPattern}${numberPatternPart})`,\n\n      `(${numberPatternPart}${alphaNumberPart}${negPartPattern}${numberPatternPart})`,\n      `(${alphaNumberPart}${numberPatternPart}${negPartPattern}${alphaNumberPart})`,\n    ]) {\n      const extractedTokens = deduplicateTokens(exportTokens(new RegExp(patternString, 'g'), text));\n      if (_.isEqual(tokens, extractedTokens)) {\n        return new RegExp(patternString, 'g');\n      }\n    }\n  }\n};\n\nexport default function generateRegexPattern(tokens, text) {\n  const naivePattern = new RegExp(tokens.length > 1 ? `(${tokens.join('|')})` : tokens, 'g');\n\n  const textWithoutMarkup = text.replace(/{/g, '').replace(/}/g, '');\n\n  const patternCandidates = [\n    patternExtractor(ipPattern),\n    patternExtractor(ipv6Pattern),\n    patternExtractor(phoneNumberPattern),\n    patternExtractor(numberPattern),\n    patternExtractor(emailPattern),\n    patternExtractor(datePattern),\n    patternExtractor(wordPattern),\n    patternExtractor(macAddressPattern),\n    patternExtractor(urlPattern),\n    patternExtractor(uuidPattern),\n    guessNumberAlphaPattern,\n    patternExtractor(hashPattern),\n  ];\n\n  for (const patternCandidateExtractor of patternCandidates) {\n    const pattern = patternCandidateExtractor(tokens, textWithoutMarkup);\n    if (pattern) {\n      return pattern;\n    }\n  }\n\n  return naivePattern;\n};","import React from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy } from '@fortawesome/free-regular-svg-icons'\n\n\nimport './App.css';\n\n\nimport generateRegexPattern, {exportTokens, deduplicateTokens} from \"./RegexGenerator\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tokenPattern = /{([^}]*)}/g;\n\n    const initialText = 'my postcode is {BC123DO}\\nthis is your postcode {aa321sd}\\nthis is wrong postcode aa132ee';\n    const tokens = this._getTokens(initialText);\n\n    this.state = {\n      initialText,\n      text: initialText,\n      pattern: this._getPattern(tokens, initialText),\n      patternCopied: false,\n      tokens: tokens,\n      inProgress: false\n    };\n    this.contentEditable = React.createRef();\n    this._handleChange = this._handleChange.bind(this);\n    this._guessPattern = this._guessPattern.bind(this);\n  }\n\n  _getHighlightedTokensText() {\n    let result = this.state.text.replace(/{/g, '').replace(/}/g, '');\n    for (const token of this.state.tokens) {\n      result = result.replace(token, `<span class=\"badge badge-success\">${token}</span>`)\n    }\n    return result.replace(/\\n/g, '<br/>');\n  }\n\n  _getTokens(text) {\n    return deduplicateTokens(exportTokens(this.tokenPattern, text));\n  }\n\n  _getPattern(tokens, text) {\n    return generateRegexPattern(tokens.map(tp => tp.replace(/{/g, '').replace(/}/g, '')), text);\n  }\n\n  _handleChange(e) {\n    const text = e.target.value;\n    this.setState({text});\n  }\n\n  _guessPattern(){\n    const text = this.state.text;\n    this.setState({inProgress: true});\n    setTimeout(() => {\n      const tokens = this._getTokens(text);\n      if (tokens.length > 0) {\n        const pattern = this._getPattern(tokens, text);\n        if (pattern) {\n          this.setState(s => ({pattern, tokens, inProgress: false}));\n        }\n      }\n    }, 10);\n  }\n\n  render() {\n    const {inProgress} = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-center\">\n          <a className=\"navbar-brand\" href=\"/\"><h1>Regex Helper</h1></a>\n        </nav>\n        <div className='container'>\n          <div className='block'>\n            Use <code>{'{'}{'}'}</code> brackets to wrap tokens you want to extract from text\n          </div>\n          <div className=\"block\">\n            <textarea className='textArea form-control' defaultValue={this.state.initialText} rows={5} onChange={this._handleChange}/>\n          </div>\n\n          <div className=\"block\">\n            <button key='run_btn' className={`btn btn-${inProgress ? 'secondary' : 'success'}`} disabled={inProgress} onClick={this._guessPattern}>{inProgress ? 'Generating...' : 'Generate pattern'}</button>\n          </div>\n\n          <div className=\"jumbotron\">\n            <div className='output' dangerouslySetInnerHTML={{__html: this._getHighlightedTokensText()}}/>\n          </div>\n          {this.state.pattern && (<div>\n            <p>Seems your pattern is: <code>{this.state.pattern.toString()}</code> <CopyToClipboard text={this.state.pattern}\n                                                                                                    onCopy={() => {\n                                                                                                      this.setState({patternCopied: true});\n                                                                                                      setTimeout(() => this.setState({patternCopied: false}), 1000)\n                                                                                                    }}>\n              <FontAwesomeIcon icon={faCopy} />\n            </CopyToClipboard>         {this.state.patternCopied ? <span style={{color: 'grey'}}>Copied</span> : null}\n            </p>\n          </div>)}\n          <div className=\"complain-guide text-center\">\n            <p>Please, don't hesitate to create <a href=\"https://github.com/alifanov/regex-helper/issues\">issues on Github</a></p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}