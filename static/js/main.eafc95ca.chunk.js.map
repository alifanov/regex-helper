{"version":3,"sources":["regexGenerator.js","App.js","serviceWorker.js","index.js"],"names":["deduplicateTokens","tokens","Set","exportTokens","pattern","text","match","exec","push","App","props","state","_handleChange","bind","tokenPattern","e","currentTarget","innerText","this","setState","length","map","tp","replace","naivePattern","RegExp","join","textWithoutMarkup","patternCandidate","extractedTokens","_","isEqual","generateRegexPattern","className","contentEditable","data-ph","onInput","toString","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAEaA,EAAoB,SAAAC,GAAM,mBAAQ,IAAIC,IAAID,KAE1CE,EAAe,SAACC,EAASC,GAIpC,IAHA,IAAMJ,EAAS,GACXK,EAAQF,EAAQG,KAAKF,GAER,OAAVC,GACLL,EAAOO,KAAKF,EAAM,IAClBA,EAAQF,EAAQG,KAAKF,GAGvB,OAAOJ,GCRT,IAsDeQ,E,YA9Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXN,KAAM,GACND,QAAS,GACTH,OAAQ,IAEV,EAAKW,cAAgB,EAAKA,cAAcC,KAAnB,gBAErB,EAAKC,aAAe,aATH,E,2EAYLC,GACZ,IAAMV,EAAOU,EAAEC,cAAcC,UAC7BC,KAAKC,SAAS,CAACd,SACf,IAAIJ,EAASD,EAAkBG,EAAae,KAAKJ,aAAcT,IAE/D,GAAIJ,EAAOmB,OAAS,EAAG,CACrBnB,EAASA,EAAOoB,KAAI,SAAAC,GAAE,OAAIA,EAAGC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,OAC3DL,KAAKC,SAAS,CAAClB,WACf,IAAMG,EDjBG,SAA8BH,EAAQI,GAiBnD,IAhBA,IAAMmB,EAAe,IAAIC,OAAOxB,EAAOmB,OAAS,EAAhB,WAAwBnB,EAAOyB,KAAK,KAApC,KAA8CzB,EAAQ,KAEhF0B,EAAoBtB,EAAKkB,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAc7D,MAP0B,CAJJ,UACF,oCAFA,gBAGA,mBASpB,eAAkD,CAA7C,IAAMK,EAAgB,KACnBC,EAAkB7B,EAAkBG,EAAayB,EAAkBD,IACzE,GAAIG,IAAEC,QAAQ9B,EAAQ4B,GACpB,OAAOD,EAIX,OAAOJ,ECPaQ,CAAqB/B,EAAQI,GACzCD,GACFc,KAAKC,SAAS,CAACf,e,+BAMnB,OACE,6BACE,yBACE6B,UAAU,WACVC,gBAAgB,OAChBC,UAAQ,0BACRC,QAASlB,KAAKN,gBAEfM,KAAKP,MAAMP,SAAY,6BACtB,6CAAmBc,KAAKP,MAAMP,QAAQiC,kB,GAtC9BC,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eafc95ca.chunk.js","sourcesContent":["import _ from 'lodash';\n\nexport const deduplicateTokens = tokens => [...new Set(tokens)];\n\nexport const exportTokens = (pattern, text) => {\n  const tokens = [];\n  let match = pattern.exec(text);\n\n  while (match !== null) {\n    tokens.push(match[1]);\n    match = pattern.exec(text);\n  }\n\n  return tokens;\n};\n\nexport default function generateRegexPattern(tokens, text) {\n  const naivePattern = new RegExp(tokens.length > 1 ? `(${tokens.join('|')})` : tokens, 'g');\n\n  const textWithoutMarkup = text.replace('<', '').replace('>', '');\n\n  const wordPattern = /([a-zA-Z]+)/mg;\n  const numberPattern = /(\\d+)/mg;\n  const datePattern = /(\\d{1,2}[.-]\\d{1,2}[.-]\\d{2,4})/mg;\n  const hashPattern = /([a-zA-Z\\d]+)/mg;\n\n  const patternCandidates = [\n    numberPattern,\n    datePattern,\n    wordPattern,\n    hashPattern,\n  ];\n\n  for (const patternCandidate of patternCandidates) {\n    const extractedTokens = deduplicateTokens(exportTokens(patternCandidate, textWithoutMarkup));\n    if (_.isEqual(tokens, extractedTokens)) {\n      return patternCandidate;\n    }\n  }\n\n  return naivePattern;\n};","import React from 'react';\nimport './App.css';\n\nimport generateRegexPattern, {exportTokens, deduplicateTokens} from \"./regexGenerator\";\n\nconst Checkbox = ({key, label, handleChange}) => {\n  return (<label>\n    <input type=\"checkbox\" onChange={handleChange}/>\n    {label}\n  </label>)\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      pattern: '',\n      tokens: [],\n    };\n    this._handleChange = this._handleChange.bind(this);\n\n    this.tokenPattern = /<([^>]*)>/g;\n  }\n\n  _handleChange(e) {\n    const text = e.currentTarget.innerText;\n    this.setState({text});\n    let tokens = deduplicateTokens(exportTokens(this.tokenPattern, text));\n    // const lines = text.split(/\\r?\\n/).filter(v => !!v);\n    if (tokens.length > 0) {\n      tokens = tokens.map(tp => tp.replace('<', '').replace('>', ''));\n      this.setState({tokens});\n      const pattern = generateRegexPattern(tokens, text);\n      if (pattern) {\n        this.setState({pattern});\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className='textArea'\n          contentEditable=\"true\"\n          data-ph='Type your examples here'\n          onInput={this._handleChange}\n        ></div>\n        {this.state.pattern && (<div>\n          <p>It seems like: {this.state.pattern.toString()}</p>\n          {/*{this.state.tokens.map((t, i) => <div>{t}: {[\"number\", \"text\", \"date\"].map(_type => <Checkbox key={i}*/}\n          {/*                                                                                              label={_type}/>)}</div>)}*/}\n        </div>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}